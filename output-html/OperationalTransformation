<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html;charset=utf-8">
<meta name="robots" content="index,nofollow">

<title>OperationalTransformation - Revctrl Wiki</title>
<script type="text/javascript" src="/static184/common/js/common.js"></script>

<script type="text/javascript">
<!--
var search_hint = "Search";
//-->
</script>


<link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/static184/modern/css/common.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="screen" href="/static184/modern/css/screen.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="print" href="/static184/modern/css/print.css">
<link rel="stylesheet" type="text/css" charset="utf-8" media="projection" href="/static184/modern/css/projection.css">

<!-- css only for MS IE6/IE7 browsers -->
<!--[if lt IE 8]>
   <link rel="stylesheet" type="text/css" charset="utf-8" media="all" href="/static184/modern/css/msie.css">
<![endif]-->





<link rel="Start" href="/FrontPage">
<link rel="Alternate" title="Wiki Markup" href="/OperationalTransformation?action=raw">
<link rel="Alternate" media="print" title="Print View" href="/OperationalTransformation?action=print">
<link rel="Search" href="/FindPage">
<link rel="Index" href="/TitleIndex">
<link rel="Glossary" href="/WordIndex">
<link rel="Help" href="/HelpOnFormatting">
</head>

<body  lang="en" dir="ltr">

<div id="header">


<form id="searchform" method="get" action="/OperationalTransformation">
<div>
<input type="hidden" name="action" value="fullsearch">
<input type="hidden" name="context" value="180">
<label for="searchinput">Search:</label>
<input id="searchinput" type="text" name="value" value="" size="20"
    onfocus="searchFocus(this)" onblur="searchBlur(this)"
    onkeyup="searchChange(this)" onchange="searchChange(this)" alt="Search">
<input id="titlesearch" name="titlesearch" type="submit"
    value="Titles" alt="Search Titles">
<input id="fullsearch" name="fullsearch" type="submit"
    value="Text" alt="Search Full Text">
</div>
</form>
<script type="text/javascript">
<!--// Initialize search form
var f = document.getElementById('searchform');
f.getElementsByTagName('label')[0].style.display = 'none';
var e = document.getElementById('searchinput');
searchChange(e);
searchBlur(e);
//-->
</script>

<ul id="username"><li><a href="/OperationalTransformation?action=login" id="login" rel="nofollow">Login</a></li></ul>
<div id="locationline">
<div id="interwiki"><span><a href="/FrontPage" rel="nofollow">Revctrl Wiki</a></span></div>

<ul id="pagelocation">
<li><a class="backlink" href="/OperationalTransformation?action=fullsearch&amp;context=180&amp;value=linkto%3A%22OperationalTransformation%22" rel="nofollow" title="Click to do a full-text search for this title">OperationalTransformation</a></li>
</ul>

</div>


<ul id="navibar">
<li class="wikilink"><a href="/FrontPage">FrontPage</a></li><li class="wikilink"><a href="/RecentChanges">RecentChanges</a></li><li class="wikilink"><a href="/FindPage">FindPage</a></li><li class="wikilink"><a href="/HelpContents">HelpContents</a></li><li class="current"><a href="/OperationalTransformation">OperationalTransformation</a></li>
</ul>

<div id="pageline"><hr style="display:none;"></div>

<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/OperationalTransformation?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/OperationalTransformation?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/OperationalTransformation">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="RenderAsDocbook">Render as Docbook</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Subscribe User</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="show" disabled class="disabled">Package Pages</option>
<option value="SyncPages">Sync Pages</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="Load">Load</option>
<option value="Save">Save</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

</div>

<div id="page" lang="en" dir="ltr">
<div dir="ltr" id="content" lang="en"><span class="anchor" id="top"></span>
<span class="anchor" id="line-1"></span><p class="line862">Operational Transformation is a theory very similar to the Darcs Theory of Patches (see <a href="/DarcsMerge">DarcsMerge</a>).  It has been developed by the collaborative editing community. <span class="anchor" id="line-2"></span><span class="anchor" id="line-3"></span><p class="line874">In collaborative editing, much less emphasis is placed on conflict marking (they don't bother with it).  Conflicts occur at a much more fine-grained level than in revision control (e.g. keypresses) and at the place that both users are currently working in real time.  This means that each user should see the other making changes in the same area, and use a mechanism other than the editing system to coordinate.  Conflict resolution just has to ensure consistency, and can otherwise do pretty much anything, as long as it is automatic. <span class="anchor" id="line-4"></span><span class="anchor" id="line-5"></span><p class="line874">A document starts empty.  Each user then begins transforming it.  Those transformations are concurrently sent to other users.  However, with multiple machines, these messages might be received in different orders by different users.  Ressel et. al. (in Proceedings of the ACM Conference on Computer Supported Cooperative Work 1996) proved some properties that must apply so that when all messages are eventually received and processed, all copies of the document are identical.  From these two properties, you can show correctness (for their definition of correctness). <span class="anchor" id="line-6"></span><span class="anchor" id="line-7"></span><p class="line867">
<h3 id="Definitions">Definitions</h3>
<span class="anchor" id="line-8"></span><span class="anchor" id="line-9"></span><p class="line862">An <em>operation</em> is a modification of a document.  e.g. the addition of a character at a particular position in the document because of a keypress. <span class="anchor" id="line-10"></span><span class="anchor" id="line-11"></span><p class="line862">A <em>transformation function</em> is a function, T, that merges two parallel operations by serialising them.  This is similar to the ||-merge operation in Darcs, or the exact <a href="/ThreeWayTextMergeImplementation">ThreeWayTextMergeImplementation</a>.  T(op1, op2) returns an operation that is the 'same' as op1 but changed so that it can be applied after op2. <span class="anchor" id="line-12"></span><span class="anchor" id="line-13"></span><p class="line874">Composition is expressed as '.': 'op1 . op2' means to apply op1, and then apply op2 to the result.  We also define T(opx, opy . opz) = T(T(opx, opy), opz).  This says that to transform opx through a pair of operations, opy.opz, you first transform opx through opy, and then you transform the result of that through opz. <span class="anchor" id="line-14"></span><span class="anchor" id="line-15"></span><p class="line867">
<h4 id="example">example</h4>
<span class="anchor" id="line-16"></span><span class="anchor" id="line-17"></span><p class="line874">A standard merge looks as below.  We have one initial context, a, and two changes, op1 and op2 that both apply to a.  Each of op1 and op2 can be passed through the transformation function T to get op1' = T(op1, op2) and op2' = T(op2, op1). <span class="anchor" id="line-18"></span><span class="anchor" id="line-19"></span><p class="line867"><span class="anchor" id="line-20"></span><span class="anchor" id="line-21"></span><span class="anchor" id="line-22"></span><span class="anchor" id="line-23"></span><span class="anchor" id="line-24"></span><span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span><span class="anchor" id="line-27"></span><span class="anchor" id="line-28"></span><span class="anchor" id="line-29"></span><pre>      a
     / \
op1 /   \ op2
   /     \
  b       c
   \     /
op2'\   / op1'
     \ /
      d</pre><span class="anchor" id="line-30"></span><span class="anchor" id="line-31"></span><p class="line867">
<h3 id="Requirements">Requirements</h3>
<span class="anchor" id="line-32"></span><span class="anchor" id="line-33"></span><p class="line874">TP1: For every two concurrent operations, op1 and op2, defined on the same state, the transformation function T must satisfy: <span class="anchor" id="line-34"></span><span class="anchor" id="line-35"></span><p class="line867"><span class="anchor" id="line-36"></span><span class="anchor" id="line-37"></span><pre>op1 . T(op2, op1) == op2 . T(op1, op2)</pre><span class="anchor" id="line-38"></span><span class="anchor" id="line-39"></span><p class="line874">In the above example, this is requirement that op1 . op2' == op2 . op1'.  d is consistent regardless of which way around the merge is performed.  This is what the above example shows. <span class="anchor" id="line-40"></span><span class="anchor" id="line-41"></span><p class="line874">TP2: For every three concurrent operations, op1, op2 and op3, defined on the same state, the transformation function T must satisfy: <span class="anchor" id="line-42"></span><span class="anchor" id="line-43"></span><p class="line867"><span class="anchor" id="line-44"></span><span class="anchor" id="line-45"></span><pre>T(op3, op1 . T(op2, op1)) == T(op3, op2 . T(op1, op2))</pre><span class="anchor" id="line-46"></span><span class="anchor" id="line-47"></span><p class="line874">or equivalently: <span class="anchor" id="line-48"></span><span class="anchor" id="line-49"></span><p class="line867"><span class="anchor" id="line-50"></span><span class="anchor" id="line-51"></span><pre>T(T(op3,op1),T(op2,op1)) == T(T(op3,op2),T(op1,op2))</pre><span class="anchor" id="line-52"></span><span class="anchor" id="line-53"></span><p class="line867">
<h4 id="example-1">example</h4>
<span class="anchor" id="line-54"></span><span class="anchor" id="line-55"></span><p class="line862">Start with the previous example where there are two parallel operations, op1 and op2.  Property TP1 says that which op you choose to transform to serialise them doesn't matter.  This gives us the <em>abcd</em> diamond of states which again appears below.  Property TP2 goes one step further and says that the way you serialise a third operation, op3, through the other two doesn't matter either.  We could transform op3 through op1 and then op2', or we could transform op3 through op2 and then op1'.  The result should be the same. <span class="anchor" id="line-56"></span><span class="anchor" id="line-57"></span><p class="line867"><span class="anchor" id="line-58"></span><span class="anchor" id="line-59"></span><span class="anchor" id="line-60"></span><span class="anchor" id="line-61"></span><span class="anchor" id="line-62"></span><span class="anchor" id="line-63"></span><span class="anchor" id="line-64"></span><span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span><span class="anchor" id="line-67"></span><span class="anchor" id="line-68"></span><span class="anchor" id="line-69"></span><span class="anchor" id="line-70"></span><span class="anchor" id="line-71"></span><span class="anchor" id="line-72"></span><span class="anchor" id="line-73"></span><span class="anchor" id="line-74"></span><span class="anchor" id="line-75"></span><span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span><span class="anchor" id="line-78"></span><pre>op1' = T(op1, op2)
op2' = T(op2, op1)
op3'a = T(op3, op1)
op3'b = T(op3, op2)
op3''a = T(op3'a, op2')
op3''b = T(op3'b, op1')

                    a--------
                   / \       \
              op1 /   \ op2   \ op3
                 /     \       \
            ----b       c----   e
           /     \     /     \
    op3'a /  op2' \   / op1'  \ op3'b
         /         \ /         \
        g           d           h
                   / \
            op3''a | | op3''b
                   \ /
                    f</pre><span class="anchor" id="line-79"></span><span class="anchor" id="line-80"></span><p class="line867">
<h2 id="Ressel.27s_Transformation_Functions">Ressel's Transformation Functions</h2>
<span class="anchor" id="line-81"></span><span class="anchor" id="line-82"></span><p class="line874">These are some proposed operators for collaborative editing, and a proposed transformation function.  I mention them here because they are similar to exact three-way-merge, and yet can be shown NOT to satisfy the above properties. <span class="anchor" id="line-83"></span><span class="anchor" id="line-84"></span><p class="line874">In this formalism, priorities are fixed attributes of the user than makes the change.  They are used to resolve conflicts (it allows both changes to be made in the order defined by the priorities). <span class="anchor" id="line-85"></span><span class="anchor" id="line-86"></span><p class="line874">There are two operations: <span class="anchor" id="line-87"></span><span class="anchor" id="line-88"></span><p class="line874">Ins(p, c, pr) inserts character c at position p with priority pr.  Del(p, pr) deletes the character at location p with priority pr. <span class="anchor" id="line-89"></span><span class="anchor" id="line-90"></span><p class="line874">And the definition of the transformation function is relatively straight forward: <span class="anchor" id="line-91"></span><span class="anchor" id="line-92"></span><p class="line867"><span class="anchor" id="line-93"></span><span class="anchor" id="line-94"></span><span class="anchor" id="line-95"></span><span class="anchor" id="line-96"></span><span class="anchor" id="line-97"></span><span class="anchor" id="line-98"></span><span class="anchor" id="line-99"></span><span class="anchor" id="line-100"></span><span class="anchor" id="line-101"></span><span class="anchor" id="line-102"></span><span class="anchor" id="line-103"></span><span class="anchor" id="line-104"></span><span class="anchor" id="line-105"></span><span class="anchor" id="line-106"></span><span class="anchor" id="line-107"></span><span class="anchor" id="line-108"></span><span class="anchor" id="line-109"></span><pre>T(Ins(p1, c1, u1), Ins(p2, c2, u2)) :-
   if (p1 &lt; p2) or (p1 == p2 and u1 &lt; u2) return Ins(p1, c1, u1)
   else return Ins(p1 + 1, c1, u1)

T(Ins(p1, c1, u1), Del(p2, u2)) :-
   if (p1 &lt;= p2) return Ins(p1, c1, u1)
   else return Ins(p1 - 1, c1, u1)

T(Del(p1, u1), Ins(p2, c2, u2)) :-
   if (p1 &lt; p2) return Del(p1, u1)
   else return Del(p1 + 1, u1)

T(Del(p1, u1), Del(p2, u2)) :-
   if (p1 &lt; p2) return Del(p1, u1)
   else if (p1 &gt; p2) return Del(p1 - 1, u1)
   else return Id()</pre><span class="anchor" id="line-110"></span><span class="anchor" id="line-111"></span><p class="line862">The counter example of TP2 (from [<a class="http" href="http://hal.inria.fr/inria-00071213">http://hal.inria.fr/inria-00071213</a> Proving correctness of transformation functions in collaborative editing systems] by Oster et. al., but with typesetting errors corrected): <span class="anchor" id="line-112"></span><span class="anchor" id="line-113"></span><p class="line867"><span class="anchor" id="line-114"></span><span class="anchor" id="line-115"></span><span class="anchor" id="line-116"></span><span class="anchor" id="line-117"></span><span class="anchor" id="line-118"></span><span class="anchor" id="line-119"></span><span class="anchor" id="line-120"></span><span class="anchor" id="line-121"></span><span class="anchor" id="line-122"></span><span class="anchor" id="line-123"></span><span class="anchor" id="line-124"></span><span class="anchor" id="line-125"></span><span class="anchor" id="line-126"></span><span class="anchor" id="line-127"></span><span class="anchor" id="line-128"></span><span class="anchor" id="line-129"></span><span class="anchor" id="line-130"></span><span class="anchor" id="line-131"></span><pre>   Site 1              Site 2              Site 3

   "abc"               "abc"               "abc"

op1 = ins(3,x)     op2 = del(2)        op3 = ins(2,y)

  "abxc"               "ac"                "aybc"

                   op3' = ins(2,y)     op2' = del(3)

                       "ayc"               "ayc"

                   op1' = ins(2,x)     op1'' = ins(3,x)

                       "axyc"              "ayxc"</pre><span class="anchor" id="line-132"></span><span class="anchor" id="line-133"></span><p class="line867">
<h2 id="Tombstone_Transformation_Functions">Tombstone Transformation Functions</h2>
<span class="anchor" id="line-134"></span><span class="anchor" id="line-135"></span><p class="line862">Having shown other systems incorrect, Oster et. al. then go on to describe the Tombstone Transformation Functions, or TTF.  In version control parlance, this is a weave (see <a href="/SimpleWeaveMerge">SimpleWeaveMerge</a>).  No characters are ever deleted, but rather they are marked invisible (these invisible characters are the 'tombstones').  Ordering ties are broken by user-ID.  They show that this system satisfies TP2 when many other systems do not. <span class="anchor" id="line-136"></span><span class="anchor" id="line-137"></span><p class="line867">
<h1 id="Strengths">Strengths</h1>
<span class="anchor" id="line-138"></span><span class="anchor" id="line-139"></span><p class="line874">Can provably merge correctly. <span class="anchor" id="line-140"></span><span class="anchor" id="line-141"></span><p class="line867">
<h1 id="Weaknesses">Weaknesses</h1>
<span class="anchor" id="line-142"></span><span class="anchor" id="line-143"></span><p class="line874">Does not mark conflicts at all. <span class="anchor" id="line-144"></span><span class="anchor" id="line-145"></span><p class="line867">
<h1 id="Used_by">Used by</h1>
<span class="anchor" id="line-146"></span><span class="anchor" id="line-147"></span><ul><li><p class="line862">A good summary paper is available from INRIA: <a class="http" href="http://hal.inria.fr/inria-00071213">http://hal.inria.fr/inria-00071213</a> <span class="anchor" id="line-148"></span></li><li><p class="line862">The [<a class="http" href="http://dev.libresource.org/home/doc/so6-user-manual">http://dev.libresource.org/home/doc/so6-user-manual</a> so6 revision control system] (pronounced saucisse) <span class="anchor" id="line-149"></span><span class="anchor" id="line-150"></span></li></ul><p class="line867">
<h1 id="Related">Related</h1>
<span class="anchor" id="line-151"></span><span class="anchor" id="line-152"></span><p class="line874">Operational Transformation theory is related to Darcs theory of patches.  Darcs is based on commuting patches: <span class="anchor" id="line-153"></span><span class="anchor" id="line-154"></span><p class="line867"><span class="anchor" id="line-155"></span><span class="anchor" id="line-156"></span><pre>op1.op2 &lt;-&gt; op2'.op1'</pre><span class="anchor" id="line-157"></span><span class="anchor" id="line-158"></span><p class="line862">As described in [<a class="http" href="http://www.abridgegame.org/pipermail/darcs-users/2003/000221.html">http://www.abridgegame.org/pipermail/darcs-users/2003/000221.html</a> this thread], this effect can be achieved using the OT transformation operator as long as you can invert an operation.  We'll define Inv(op) to be another operation that has the opposite effect of op.  This means that Inv(op).op is the identity.  Inv(op) is both a left and a right inverse, so op.Inv(op) is also the identity. <span class="anchor" id="line-159"></span><span class="anchor" id="line-160"></span><p class="line874">We can then define the commuted op1 and op2, those being op1' and op2', as: <span class="anchor" id="line-161"></span><span class="anchor" id="line-162"></span><p class="line867"><span class="anchor" id="line-163"></span><span class="anchor" id="line-164"></span><span class="anchor" id="line-165"></span><pre>op2' = T(op2, Inv(op1))
op1' = T(op1, op2')</pre><span class="anchor" id="line-166"></span><span class="anchor" id="line-167"></span><p class="line874">Rather than inverting operators, it is also possible to view this as having an inverse Transformation function, T-1.  Imagine opA and opB are parallel ops that need to be merged; then we get opB' = T(opB, opA).  And then opB = T-1(opB', opA).  The commutation of op1 and op2 then becomes: <span class="anchor" id="line-168"></span><span class="anchor" id="line-169"></span><p class="line867"><span class="anchor" id="line-170"></span><span class="anchor" id="line-171"></span><span class="anchor" id="line-172"></span><pre>op2' = T-1(op2, op1)
op1' = T(op1, op2')</pre><span class="anchor" id="line-173"></span><span class="anchor" id="line-174"></span><p class="line862">[<a class="http" href="http://hal.inria.fr/inria-00109039/en/">http://hal.inria.fr/inria-00109039/en/</a> This paper] describes partial T-1 functions for the tombstone transformation operators. <span class="anchor" id="line-175"></span><span class="anchor" id="line-176"></span><p class="line867"><hr /><p class="line874"> <span class="anchor" id="line-177"></span><span class="anchor" id="line-178"></span><p class="line867"><a href="/CategoryMergeAlgorithm">CategoryMergeAlgorithm</a> <span class="anchor" id="line-179"></span><span class="anchor" id="bottom"></span></div><p id="pageinfo" class="info" lang="en" dir="ltr">Revctrl Wiki: OperationalTransformation  (last edited 2008-08-15 12:15:21 by <span title="EricKow @ acrab.bton.ac.uk[194.81.199.35]"><a class="nonexistent" href="/EricKow" title="EricKow @ acrab.bton.ac.uk[194.81.199.35]">EricKow</a></span>)</p>

<div id="pagebottom"></div>
</div>


<div id="footer">
<ul class="editbar"><li><span class="disabled">Immutable Page</span></li><li class="toggleCommentsButton" style="display:none;"><a href="#" class="nbcomment" onClick="toggleComments();return false;">Comments</a></li><li><a class="nbinfo" href="/OperationalTransformation?action=info" rel="nofollow">Info</a></li><li><a class="nbattachments" href="/OperationalTransformation?action=AttachFile" rel="nofollow">Attachments</a></li><li>
<form class="actionsmenu" method="GET" action="/OperationalTransformation">
<div>
    <label>More Actions:</label>
    <select name="action"
        onchange="if ((this.selectedIndex != 0) &&
                      (this.options[this.selectedIndex].disabled == false)) {
                this.form.submit();
            }
            this.selectedIndex = 0;">
        <option value="raw">Raw Text</option>
<option value="print">Print View</option>
<option value="RenderAsDocbook">Render as Docbook</option>
<option value="refresh">Delete Cache</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="SpellCheck">Check Spelling</option>
<option value="LikePages">Like Pages</option>
<option value="LocalSiteMap">Local Site Map</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="RenamePage" disabled class="disabled">Rename Page</option>
<option value="DeletePage" disabled class="disabled">Delete Page</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Subscribe User</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="show" disabled class="disabled">Remove Spam</option>
<option value="show" disabled class="disabled">Revert to this revision</option>
<option value="show" disabled class="disabled">Package Pages</option>
<option value="SyncPages">Sync Pages</option>
<option value="show" disabled class="disabled">------------------------</option>
<option value="Load">Load</option>
<option value="Save">Save</option>
    </select>
    <input type="submit" value="Do">
    
</div>
<script type="text/javascript">
<!--// Init menu
actionsMenuInit('More Actions:');
//-->
</script>
</form>
</li></ul>

<ul id="credits">
<li><a href="http://moinmo.in/" title="This site uses the MoinMoin Wiki software.">MoinMoin Powered</a></li><li><a href="http://moinmo.in/Python" title="MoinMoin is written in Python.">Python Powered</a></li><li><a href="http://moinmo.in/GPL" title="MoinMoin is GPL licensed.">GPL licensed</a></li><li><a href="http://validator.w3.org/check?uri=referer" title="Click here to validate this page.">Valid HTML 4.01</a></li>
</ul>


</div>
</body>
</html>

